{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar board;\nvar score = 0;\nvar rows = 4;\nvar columns = 4;\nvar messageLost = document.getElementsByClassName(\"message-lose\")[0];\nvar startButton = document.getElementsByClassName(\"start\")[0];\nvar messageStart = document.getElementsByClassName(\"message-start\")[0];\nvar messageWon = document.getElementsByClassName(\"message-win\")[0];\nvar gameScore = document.getElementsByClassName(\"game-score\")[0];\nstartButton.addEventListener(\"click\", function(e) {\n    setGame();\n});\nfunction setGame() {\n    score = 0;\n    gameScore.innerText = score;\n    messageStart.classList.add(\"hidden\");\n    startButton.classList.remove(\"start\");\n    startButton.classList.add(\"restart\");\n    messageLost.classList.add(\"hidden\");\n    startButton.innerText = \"Restart\";\n    board = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ];\n    for(var r = 0; r < rows; r++)for(var c = 0; c < columns; c++){\n        var arrOfRows = document.getElementsByClassName(\"field-row\");\n        var arrRow = arrOfRows[r].children;\n        var tile = arrRow[c];\n        var num = board[r][c];\n        tile.id = r.toString() + \"-\" + c.toString();\n        updateTile(tile, num);\n    }\n    setRandom();\n    setRandom();\n}\nfunction hasEmpty() {\n    for(var r = 0; r < rows; r++)for(var c = 0; c < columns; c++){\n        if (board[r][c] === 0) return true;\n    }\n    return false;\n}\nfunction setRandom() {\n    if (!hasEmpty()) return;\n    var found = false;\n    while(!found){\n        var r = Math.floor(Math.random() * rows);\n        var c = Math.floor(Math.random() * columns);\n        if (board[r][c] === 0) {\n            var probability = Math.floor(Math.random() * 10);\n            var tile = document.getElementById(r.toString() + \"-\" + c.toString());\n            found = true;\n            if (probability === 0) {\n                var num = 4;\n                board[r][c] = num;\n                tile.innerText = num.toString();\n                tile.classList.add(\"field-cell--\" + num);\n            } else {\n                var num1 = 2;\n                board[r][c] = num1;\n                tile.innerText = num1.toString();\n                tile.classList.add(\"field-cell--\" + num1);\n            }\n        }\n    }\n}\nfunction updateTile(tile, num) {\n    tile.innerText = \"\";\n    tile.classList.value = \"\";\n    tile.classList.add(\"field-cell\");\n    if (num > 0) {\n        tile.innerText = num;\n        if (num <= 2048) tile.classList.add(\"field-cell--\" + num);\n    }\n}\ndocument.addEventListener(\"keyup\", function(e) {\n    var prevState = board.map(function(arr) {\n        return arr.slice();\n    });\n    switch(e.code){\n        case \"ArrowLeft\":\n            slideLeft();\n            if (isAble(prevState)) setRandom();\n            break;\n        case \"ArrowRight\":\n            slideRight();\n            if (isAble(prevState)) setRandom();\n            break;\n        case \"ArrowUp\":\n            slideUp();\n            if (isAble(prevState)) setRandom();\n            break;\n        case \"ArrowDown\":\n            slideDown();\n            if (isAble(prevState)) setRandom();\n            break;\n    }\n    if (isFull(board) && noMoves(board)) messageLost.classList.remove(\"hidden\");\n    if (won(board)) messageWon.classList.remove(\"hidden\");\n});\nfunction filterZero(row) {\n    return row.filter(function(num) {\n        return num !== 0;\n    });\n}\nfunction slide(row) {\n    var rowCopy = _to_consumable_array(row);\n    rowCopy = filterZero(rowCopy);\n    for(var i = 0; i < rowCopy.length - 1; i++)if (rowCopy[i] === rowCopy[i + 1]) {\n        rowCopy[i] *= 2;\n        rowCopy[i + 1] = 0;\n        score += rowCopy[i];\n        gameScore.innerText = score;\n    }\n    rowCopy = filterZero(rowCopy);\n    while(rowCopy.length < columns)rowCopy.push(0);\n    return rowCopy;\n}\nfunction slideLeft() {\n    for(var r = 0; r < rows; r++){\n        var row = board[r];\n        row = slide(row);\n        board[r] = row;\n        for(var c = 0; c < columns; c++){\n            var tile = document.getElementById(r.toString() + \"-\" + c.toString());\n            var num = board[r][c];\n            updateTile(tile, num);\n        }\n    }\n}\nfunction slideRight() {\n    for(var r = 0; r < rows; r++){\n        var row = board[r];\n        row.reverse();\n        row = slide(row);\n        row.reverse();\n        board[r] = row;\n        for(var c = 0; c < columns; c++){\n            var tile = document.getElementById(r.toString() + \"-\" + c.toString());\n            var num = board[r][c];\n            updateTile(tile, num);\n        }\n    }\n}\nfunction slideUp() {\n    for(var c = 0; c < columns; c++){\n        var row = [];\n        for(var i = 0; i < rows; i++)row.push(board[i][c]);\n        row = slide(row);\n        for(var r = 0; r < rows; r++){\n            board[r][c] = row[r];\n            var tile = document.getElementById(r.toString() + \"-\" + c.toString());\n            var num = board[r][c];\n            updateTile(tile, num);\n        }\n    }\n}\nfunction slideDown() {\n    for(var c = 0; c < columns; c++){\n        var row = [];\n        for(var i = 0; i < rows; i++)row.push(board[i][c]);\n        row.reverse();\n        row = slide(row);\n        row.reverse();\n        for(var r = 0; r < rows; r++){\n            board[r][c] = row[r];\n            var tile = document.getElementById(r.toString() + \"-\" + c.toString());\n            var num = board[r][c];\n            updateTile(tile, num);\n        }\n    }\n}\nfunction isAble(prev) {\n    for(var r = 0; r < rows; r++)for(var c = 0; c < columns; c++){\n        if (prev[r][c] !== board[r][c]) return true;\n    }\n    return false;\n}\nfunction isFull(arr) {\n    for(var r = 0; r < rows; r++)for(var c = 0; c < columns; c++){\n        if (arr[r][c] === 0) return false;\n    }\n    return true;\n}\nfunction noMoves(arr) {\n    for(var r = 0; r < rows; r++)for(var c = 0; c < columns - 1; c++){\n        if (arr[r][c] === arr[r][c + 1]) return false;\n    }\n    for(var r1 = 0; r1 < rows - 1; r1++)for(var c1 = 0; c1 < columns; c1++){\n        if (arr[r1][c1] === arr[r1 + 1][c1]) return false;\n    }\n    return true;\n}\nfunction won(arr) {\n    for(var r = 0; r < rows; r++)for(var c = 0; c < columns; c++){\n        if (arr[r][c] === 2048) return true;\n    }\n    return false;\n}\n\n//# sourceMappingURL=index.b8da1f0f.js.map\n","'use strict';\n\nlet board;\nlet score = 0;\nconst rows = 4;\nconst columns = 4;\nconst messageLost = document.getElementsByClassName('message-lose')[0];\nconst startButton = document.getElementsByClassName('start')[0];\nconst messageStart = document.getElementsByClassName('message-start')[0];\nconst messageWon = document.getElementsByClassName('message-win')[0];\nconst gameScore = document.getElementsByClassName('game-score')[0];\n\nstartButton.addEventListener('click', (e) => {\n  setGame();\n});\n\nfunction setGame() {\n  score = 0;\n  gameScore.innerText = score;\n  messageStart.classList.add('hidden');\n  startButton.classList.remove('start');\n  startButton.classList.add('restart');\n  messageLost.classList.add('hidden');\n  startButton.innerText = 'Restart';\n\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      const arrOfRows = document.getElementsByClassName('field-row');\n      const arrRow = arrOfRows[r].children;\n      const tile = arrRow[c];\n      const num = board[r][c];\n\n      tile.id = (r.toString() + '-' + c.toString());\n      updateTile(tile, num);\n    }\n  }\n\n  setRandom();\n  setRandom();\n}\n\nfunction hasEmpty() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (board[r][c] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction setRandom() {\n  if (!hasEmpty()) {\n    return;\n  }\n\n  let found = false;\n\n  while (!found) {\n    const r = Math.floor(Math.random() * rows);\n    const c = Math.floor(Math.random() * columns);\n\n    if (board[r][c] === 0) {\n      const probability = Math.floor(Math.random() * 10);\n      const tile = document.getElementById(\n        r.toString() + '-' + c.toString());\n\n      found = true;\n\n      if (probability === 0) {\n        const num = 4;\n\n        board[r][c] = num;\n        tile.innerText = num.toString();\n        tile.classList.add('field-cell--' + num);\n      } else {\n        const num = 2;\n\n        board[r][c] = num;\n        tile.innerText = num.toString();\n        tile.classList.add('field-cell--' + num);\n      }\n    }\n  }\n}\n\nfunction updateTile(tile, num) {\n  tile.innerText = '';\n  tile.classList.value = '';\n  tile.classList.add('field-cell');\n\n  if (num > 0) {\n    tile.innerText = num;\n\n    if (num <= 2048) {\n      tile.classList.add('field-cell--' + num);\n    }\n  }\n}\n\ndocument.addEventListener('keyup', (e) => {\n  const prevState = board.map((arr) => {\n    return arr.slice();\n  });\n\n  switch (e.code) {\n    case 'ArrowLeft':\n      slideLeft();\n\n      if (isAble(prevState)) {\n        setRandom();\n      }\n      break;\n    case 'ArrowRight':\n      slideRight();\n\n      if (isAble(prevState)) {\n        setRandom();\n      }\n      break;\n    case 'ArrowUp':\n      slideUp();\n\n      if (isAble(prevState)) {\n        setRandom();\n      }\n      break;\n    case 'ArrowDown':\n      slideDown();\n\n      if (isAble(prevState)) {\n        setRandom();\n      }\n      break;\n  }\n\n  if (isFull(board) && noMoves(board)) {\n    messageLost.classList.remove('hidden');\n  }\n\n  if (won(board)) {\n    messageWon.classList.remove('hidden');\n  }\n});\n\nfunction filterZero(row) {\n  return row.filter((num) => num !== 0);\n}\n\nfunction slide(row) {\n  let rowCopy = [...row];\n\n  rowCopy = filterZero(rowCopy);\n\n  for (let i = 0; i < rowCopy.length - 1; i++) {\n    if (rowCopy[i] === rowCopy[i + 1]) {\n      rowCopy[i] *= 2;\n      rowCopy[i + 1] = 0;\n      score += rowCopy[i];\n      gameScore.innerText = score;\n    }\n  }\n\n  rowCopy = filterZero(rowCopy);\n\n  while (rowCopy.length < columns) {\n    rowCopy.push(0);\n  }\n\n  return rowCopy;\n}\n\nfunction slideLeft() {\n  for (let r = 0; r < rows; r++) {\n    let row = board[r];\n\n    row = slide(row);\n    board[r] = row;\n\n    for (let c = 0; c < columns; c++) {\n      const tile = document.getElementById(\n        r.toString() + '-' + c.toString());\n      const num = board[r][c];\n\n      updateTile(tile, num);\n    }\n  }\n}\n\nfunction slideRight() {\n  for (let r = 0; r < rows; r++) {\n    let row = board[r];\n\n    row.reverse();\n    row = slide(row);\n    row.reverse();\n    board[r] = row;\n\n    for (let c = 0; c < columns; c++) {\n      const tile = document.getElementById(\n        r.toString() + '-' + c.toString());\n      const num = board[r][c];\n\n      updateTile(tile, num);\n    }\n  }\n}\n\nfunction slideUp() {\n  for (let c = 0; c < columns; c++) {\n    let row = [];\n\n    for (let i = 0; i < rows; i++) {\n      row.push(board[i][c]);\n    }\n\n    row = slide(row);\n\n    for (let r = 0; r < rows; r++) {\n      board[r][c] = row[r];\n\n      const tile = document.getElementById(\n        r.toString() + '-' + c.toString());\n      const num = board[r][c];\n\n      updateTile(tile, num);\n    }\n  }\n}\n\nfunction slideDown() {\n  for (let c = 0; c < columns; c++) {\n    let row = [];\n\n    for (let i = 0; i < rows; i++) {\n      row.push(board[i][c]);\n    }\n\n    row.reverse();\n    row = slide(row);\n    row.reverse();\n\n    for (let r = 0; r < rows; r++) {\n      board[r][c] = row[r];\n\n      const tile = document.getElementById(\n        r.toString() + '-' + c.toString());\n      const num = board[r][c];\n\n      updateTile(tile, num);\n    }\n  }\n}\n\nfunction isAble(prev) {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (prev[r][c] !== board[r][c]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction isFull(arr) {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (arr[r][c] === 0) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction noMoves(arr) {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns - 1; c++) {\n      if (arr[r][c] === arr[r][c + 1]) {\n        return false;\n      }\n    }\n  }\n\n  for (let r = 0; r < rows - 1; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (arr[r][c] === arr[r + 1][c]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction won(arr) {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (arr[r][c] === 2048) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","board","score","messageLost","document","getElementsByClassName","startButton","messageStart","messageWon","gameScore","setRandom","hasEmpty","r","c","found","Math","floor","random","probability","tile","getElementById","toString","innerText","num","classList","add","num1","updateTile","value","filterZero","row","filter","slide","rowCopy","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","call","slice","constructor","name","test","_non_iterable_spread","TypeError","push","isAble","prev","addEventListener","e","setGame","remove","arrRow","arrOfRows","children","id","prevState","map","code","slideLeft","slideRight","reverse","slideUp","slideDown","isFull","noMoves","columns","r1","rows","c1","won"],"version":3,"file":"index.b8da1f0f.js.map"}